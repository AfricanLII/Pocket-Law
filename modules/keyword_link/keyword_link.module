<?php
/**
 * @file
 * A module that allows you to define keyword/link pairs.
 */
 
/**
 * Implementation of hook_menu()
 */
function keyword_link_menu() {

  $items['admin/settings/keyword_link'] = array(
    'title' => t('Keyword link list'),
    'description' => t('Keyword link list'), 
    'page callback' => 'keyword_link_list_page', 
    'access arguments' => array('administer keyword link'), 
  );
  
  $items['admin/settings/keyword_link/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/settings/keyword_link/add'] = array(
    'title' => t('Add keyword link'),
    'description' => t('Add new keyword link.'), 
    'page callback' => 'drupal_get_form',
    'page arguments' => array('keyword_link_form', array()),
    'access arguments' => array('administer keyword link'), 
    'weight' => 1,
    'type' => MENU_LOCAL_TASK, 
  );
  
  $items['admin/settings/keyword_link/delete'] = array(
    'title' => t('Delete keyword link'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('keyword_link_delete'),
    'access arguments' => array('administer keyword link'), 
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/settings/keyword_link/edit'] = array(
    'type' => MENU_CALLBACK,
    'title' => t('Edit Keyword'),
    'page callback' => 'keyword_link_edit',
    'access arguments' => array('administer keyword link'),
  );
  

  return $items;
}

function keyword_link_load($arg) {var_dump($arg);
  return $arg;
}

/**
 * Implementation of hook_perm().
 */
function keyword_link_perm() {
  return array('administer keyword link');
}

/**
 * Menu callback: edit an access rule.
 */
function keyword_link_edit($wid = 0) {
  $keyword = db_fetch_array(db_query('SELECT * FROM {keyword_link} WHERE wid = %d', $wid));
  return drupal_get_form('keyword_link_form', $keyword);
}


/**
 * Keyword link settings form
 */
function keyword_link_form(&$form_state, $keyword) {
  $form = array();
  
  $form['wid'] = array(
    '#type' => 'value',
    '#value' => $keyword['wid'],
  );
  
  $form['keyword'] = array(
    '#type' => 'textfield', 
    '#title' => t('Keyword'), 
    '#default_value' => $keyword['keyword'],
    '#required' => TRUE,
  );

  $form['link'] = array(
    '#type' => 'textfield', 
    '#title' => t('Link'), 
    '#default_value' => '', 
    '#default_value' => $keyword['link'],
    '#required' => TRUE,
  );

  $form['attributes'] = array(
    '#type' => 'checkboxes', 
    '#title' => t('Attributes'),
    '#options' => array('nofollow' => t('No Follow'), 'first' => t('First match only'), 'newwindow' => t('New window'), 'case' => t('Ignore case')), 
    '#default_value' => isset($keyword['attributes']) ? unserialize($keyword['attributes']) : array(),
    '#description' => t('Attributes of keyword and link'), 
  );

  $form['#redirect'] = 'admin/settings/keyword_link';

  $form['submit'] = array(
   '#type' => 'submit', 
   '#value' => t('Save')
  );

  return $form;
}

/**
 * Submit
 */
function keyword_link_form_submit($form, &$form_state) {

  $attributes = serialize($form_state['values']['attributes']);
  
  
  if ($form_state['values']['wid']) {
    db_query("UPDATE {keyword_link} SET keyword = '%s' , link = '%s', attributes = '%s' WHERE wid = %d", $form_state['values']['keyword'], $form_state['values']['link'], $attributes, $form_state['values']['wid'] );
  }
  else db_query("INSERT INTO {keyword_link} (keyword, link, attributes) VALUES ('%s', '%s', '%s')", $form_state['values']['keyword'], $form_state['values']['link'], $attributes);
    
    
  drupal_set_message(t('Your keyword has been saved.'));
}

/**
 * List exist keyword link
 */
function keyword_link_list_page() {
  $rows = array();
  
  $result = db_query("SELECT * FROM {keyword_link} ORDER BY wid ASC");
 
  while ($keyword = db_fetch_object($result)) {
    $row = array(); 
    $row[] = $keyword->wid;
    $row[] = $keyword->keyword;
    $row[] = $keyword->link;
    $row[] = l("Edit", "admin/settings/keyword_link/edit/$keyword->wid");
    $row[] = l("Delete", "admin/settings/keyword_link/delete/$keyword->wid");
    $rows[] = $row; 
  }
  
  $header = array(t('ID'), t('Keyword'), t('Link'), array('data' => t('Operations'), 'colspan' => 2));
  $output = theme('table', $header, $rows);
  return $output;
}

function keyword_link_delete() {
  $wid = arg(4);
  $keyword = db_fetch_object(db_query('SELECT * FROM {keyword_link} WHERE wid = %d', $wid));

  if ($keyword) {
    $form['wid'] = array('#type' => 'hidden', '#value' => $keyword->wid);
    return confirm_form($form, t('Are you sure you want to delete the keyword %keyword?', array('%keyword' => $keyword->keyword)), 'admin/settings/keyword_link', '', t('Delete'), t('Cancel'));
    
  }
  else {
    drupal_not_found();
  }
}

/**
 * Process keyword delete form submission.
 */
function keyword_link_delete_submit($form, &$form_state) {
  db_query("DELETE FROM {keyword_link} WHERE wid = %d", $form_state['values']['wid']);
  $form_state['redirect'] = 'admin/settings/keyword_link';
  return;
}

/**
 * Implementation of hook_nodeapi()
 */
function keyword_link_nodeapi(&$node, $op, $teaser, $page) {
  if ($op == 'view') {
    $node->content['body']['#value'] = keyword_link_replace($node->content['body']['#value']);
  }
}

function keyword_link_replace($content) {

  $result = db_query("SELECT * FROM {keyword_link} ORDER BY wid ASC");
 
  while ($keyword = db_fetch_object($result)) {
    $row = array(); 
    
    $row[] = $keyword->keyword;
    $link = $keyword->link;
    
    $keyword->attributes = unserialize($keyword->attributes);
    $cleankeyword = stripslashes($keyword->keyword);
    $url  = "<span class='keyword_link'>";
    $url .= '<a href="'. $link .'"';
    if ($keyword->attributes['nofollow']) 
      $url .= ' rel="nofollow"';
    if ($keyword->attributes['newwindow']) 
      $url .= ' target="_blank"';

    $url .= ">$cleankeyword</a>";
    $url .= "</span>";

    if ($keyword->attributes['first']) $limit = 1; 
    else $limit=-1;

    if ($keyword->attributes['case']) $case = "i"; 
    else $case="";

    if (strpos( $cleankeyword  , '\'')>0)
      $regex = '\'(?!((<.*?)|(<a.*?)))('.  $cleankeyword . ')(?!(([^<>]*?)>)|([^>]*?</a>))\'s' . $case;
    else
      $regex = '\'(?!((<.*?)|(<a.*?)))(\b'. $cleankeyword . '\b)(?!(([^<>]*?)>)|([^>]*?</a>))\'s' . $case;

    $content = preg_replace($regex, $url, $content, $limit);

  }

  return $content; 
}